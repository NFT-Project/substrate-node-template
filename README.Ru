# Шаблон узла Substrate

Свежая нода [Substrate](https://substrate.io/), готовая к взлому :rocket:

Автономная версия этого шаблона доступна для каждого релиза Polkadot в репозитории [Substrate Developer Hub Parachain Template](https://github.com/substrate-developer-hub/substrate-parachain-template/).
Шаблон parachain генерируется непосредственно в каждой ветке релиза Polkadot из [Node Template in Substrate](https://github.com/paritytech/substrate/tree/master/bin/node-template) upstream.

Обычно для начала нового проекта лучше использовать отдельную версию.
Все ошибки, предложения и пожелания по функциям должны быть направлены в репозиторий [Substrate](https://github.com/paritytech/substrate/tree/master/bin/node-template).

## Начало работы

В зависимости от вашей операционной системы и версии Rust, для компиляции этого шаблона могут потребоваться дополнительные пакеты.
Проверьте наиболее распространенные зависимости в инструкции [Install](https://docs.substrate.io/install/) для вашей платформы.
Также вы можете воспользоваться одним из вариантов [альтернативной установки](#alternatives-installations).

### Build

Используйте следующую команду для сборки узла без его запуска:

``sh
cargo build --release
```

### Встроенная документация

После сборки проекта вы можете использовать следующую команду для изучения его параметров и подкоманд:

``sh
./target/release/node-template -h
```

Вы можете сгенерировать и просмотреть [Rust Docs](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) для этого шаблона с помощью этой команды:

``sh
cargo +nightly doc --open
```

### Цепочка одноузловой разработки

Следующая команда запускает одноузловую цепочку разработки, которая не сохраняет состояние:

``sh
./target/release/node-template --dev
```

Чтобы очистить состояние цепочки разработки, выполните следующую команду:

```sh
./target/release/node-template purge-chain --dev
```

Чтобы запустить цепочку разработки с подробным протоколированием, выполните следующую команду:

``sh
RUST_BACKTRACE=1 ./target/release/node-template -ldebug --dev
```

Цепочки разработки:

- Сохраняйте состояние в папке `tmp` во время работы узла.
- Используйте учетные записи **Alice** и **Bob** в качестве полномочий валидатора по умолчанию.
- Используют учетную запись **Alice** в качестве учетной записи `sudo по умолчанию.
- Предварительно сконфигурированы с состоянием генезиса (`/node/src/chain_spec.rs`), которое включает несколько предварительно финансируемых учетных записей разработки.


Чтобы сохранить состояние цепочки между запусками, укажите базовый путь, выполнив команду, подобную следующей:

``sh
// Создайте папку для использования в качестве базового пути db
$ mkdir my-chain-state

// Используем эту папку для хранения состояния цепочки
$ ./target/release/node-template --dev --base-path ./my-chain-state/

// Проверьте структуру папок, созданную в базовом пути после запуска цепочки
$ ls ./my-chain-state
цепочки
$ ls ./my-chain-state/chains/
dev
$ ls ./my-chain-state/chains/dev
сеть хранилищ ключей db
```

### Соединение с фронт-эндом Polkadot-JS Apps

После локального запуска шаблона узла вы можете взаимодействовать с ним с помощью размещенной версии фронтэнда [Polkadot/Substrate Portal](https://polkadot.js.org/apps/#/explorer?rpc=ws://localhost:9944), подключившись к локальной конечной точке узла.
Размещенная версия также доступна на [IPFS (redirect) here](https://dotapps.io/) или [IPNS (direct) here](ipns://dotapps.io/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/explorer).
Вы также можете найти исходный код и инструкции по размещению собственного экземпляра в репозитории [polkadot-js/apps](https://github.com/polkadot-js/apps).

### Многоузловой локальный тестнет

Если вы хотите увидеть многоузловой алгоритм консенсуса в действии, смотрите [Simulate a network](https://docs.substrate.io/tutorials/build-a-blockchain/simulate-network/).

## Структура шаблона

Проект Substrate, подобный этому, состоит из нескольких компонентов, которые распределены по нескольким директориям.

### Узел

Узел блокчейна - это приложение, которое позволяет пользователям участвовать в сети блокчейна.
Блокчейн-узлы на основе субстрата предоставляют ряд возможностей:

- Работа в сети: Узлы субстрата используют сетевой стек [`libp2p`](https://libp2p.io/), чтобы позволить
  узлам в сети общаться друг с другом.
- Консенсус: Блокчейн должен иметь способ прийти к [консенсусу](https://docs.substrate.io/fundamentals/consensus/) о состоянии сети.
  Substrate позволяет создавать собственные механизмы консенсуса, а также поставляется с несколькими механизмами консенсуса, которые были построены на основе [исследований Web3 Foundation](https://research.web3.foundation/en/latest/polkadot/NPoS/index.html).
- Сервер RPC: Сервер удаленных вызовов процедур (RPC) используется для взаимодействия с узлами Substrate.

В каталоге `node` находится несколько файлов.
Обратите особое внимание на следующие:

- [`chain_spec.rs`](./node/src/chain_spec.rs): [спецификация цепи](https://docs.substrate.io/build/chain-spec/) - это файл исходного кода, определяющий начальное (генезисное) состояние цепи Substrate.
  Спецификации цепей полезны при разработке и тестировании, а также критичны при проектировании запуска производственной цепи.
  Обратите внимание на функции `development_config` и `testnet_genesis`.
  Эти функции используются для определения состояния генезиса для локальной конфигурации цепочки разработки.
  Эти функции определяют некоторые [известные аккаунты](https://docs.substrate.io/reference/command-line-tools/subkey/) и используют их для настройки начального состояния блокчейна.
- [`service.rs`](./node/src/service.rs): Этот файл определяет реализацию узла.
  Обратите внимание на библиотеки, которые импортирует этот файл, и имена функций, которые он вызывает.
  В частности, здесь есть ссылки на темы, связанные с консенсусом, такие как [финализация и форки блоков](https://docs.substrate.io/fundamentals/consensus/#finalization-and-forks) и другие [механизмы консенсуса](https://docs.substrate.io/fundamentals/consensus/#default-consensus-models), такие как Aura для авторинга блоков и GRANDPA для финализации.


### Время выполнения

В Substrate термины "время выполнения" и "функция перехода состояния" являются аналогами.
Оба термина относятся к основной логике блокчейна, которая отвечает за проверку блоков и выполнение заданных ими изменений состояния.
Проект Substrate в этом репозитории использует [FRAME](https://docs.substrate.io/learn/runtime-development/#frame) для построения времени выполнения блокчейна.
FRAME позволяет разработчикам времени выполнения объявлять специфическую для домена логику в модулях, называемых "паллетами".
В основе FRAME лежит полезный [макроязык](https://docs.substrate.io/reference/frame-macros/), который позволяет легко создавать паллеты и гибко комбинировать их для создания блокчейнов, которые могут решать [разнообразные задачи](https://substrate.io/ecosystem/projects/).

Просмотрите [реализацию FRAME во время выполнения](./runtime/src/lib.rs), включенную в этот шаблон, и обратите внимание на следующее:

- Этот файл конфигурирует несколько паллет для включения в среду выполнения.
  Конфигурация каждой палеты определяется блоком кода, который начинается с `impl $PALLET_NAME::Config for Runtime`.
- Паллеты объединяются в единую среду выполнения с помощью макроса [`construct_runtime!`](https://paritytech.github.io/substrate/master/frame_support/macro.construct_runtime.html), который является частью библиотеки [core FRAME pallet library](https://docs.substrate.io/reference/frame-pallets/#system-pallets).

### Палеты

Время выполнения в этом проекте построено с использованием многих паллет FRAME, поставляемых с [репозиторием Substrate](https://github.com/paritytech/substrate/tree/master/frame) и паллет-шаблонов, которые [определены в директории `pallets`](./pallets/template/src/lib.rs).

Паллет FRAME состоит из ряда примитивов блокчейна, включая:

- Хранилище: FRAME определяет богатый набор мощных [абстракций хранения](https://docs.substrate.io/build/runtime-storage/), которые позволяют легко использовать эффективную базу данных Substrate с ключами-значениями для управления изменяющимся состоянием блокчейна.
- Отправляемые предметы: Паллеты FRAME определяют специальные типы функций, которые могут быть вызваны (диспетчеризированы) извне среды выполнения для обновления ее состояния.
- События: Substrate использует [events](https://docs.substrate.io/build/events-and-errors/) для уведомления пользователей о значительных изменениях состояния.
- Ошибки: Когда диспетчер не справляется с задачей, он возвращает ошибку.

Каждый паллет имеет свой собственный признак `Config`, который служит интерфейсом конфигурации для общего определения типов и параметров, от которых он зависит.

## Альтернативные варианты установки

Вместо установки зависимостей и непосредственной сборки этого исходного кода, рассмотрите следующие альтернативы.

### Nix

Установите [nix](https://nixos.org/) и
[nix-direnv](https://github.com/nix-community/nix-direnv), чтобы полностью подключить и использовать
для настройки среды разработки.
Чтобы получить все нужные зависимости, активируйте direnv `direnv allow`.

### Docker

Следуйте инструкциям [Substrate Docker instructions here](https://github.com/paritytech/substrate/blob/master/docker/README.md) для сборки Docker-контейнера с бинарным шаблоном Substrate Node Template.
